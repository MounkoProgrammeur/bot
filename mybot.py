from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import os
import logging
from groq import Groq

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialisation de FastAPI
app = FastAPI()

# Cl√©s API
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")

# V√©rifier les cl√©s
if not TELEGRAM_TOKEN or not GROQ_API_KEY:
    raise ValueError("TELEGRAM_TOKEN ou GROQ_API_KEY non d√©fini !")

client = Groq(api_key=GROQ_API_KEY)

# Historique et langue des utilisateurs
user_histories = {}
user_languages = {}

# Initialisation de l'application Telegram
application = Application.builder().token(TELEGRAM_TOKEN).build()

# Commande /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_languages:
        keyboard = [
            [InlineKeyboardButton("Fran√ßais üá´üá∑", callback_data='fr')],
            [InlineKeyboardButton("English üá¨üáß", callback_data='en')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã Salut ! Bienvenue sur ton assistant IA sp√©cialis√© en informatique et d√©veloppement developp√© par mon maitre JIMMY MOUNKO.\n"
            "Choisis ta langue pour commencer / Choose your language:",
            reply_markup=reply_markup
        )
    else:
        language = user_languages[user_id]
        if language == 'fr':
            await update.message.reply_text(
                "üëã Salut ! Je suis ton assistant IA. Je peux t‚Äôaider surtout avec le d√©veloppement web, les applications et les technologies.\n"
                "Pose-moi une question et je te r√©pondrai !\n\n"
                "Commandes utiles :\n"
                "/clear - Effacer l‚Äôhistorique de la conversation\n"
                "/help - Aide"
            )
        else:
            await update.message.reply_text(
                "üëã Hello! I‚Äôm your AI assistant. I mainly help with web development, apps, and technology questions. "
                "Ask me anything and I‚Äôll answer!\n\n"
                "Useful commands:\n"
                "/clear - Clear the conversation history\n"
                "/help - Help"
            )

# Gestion de la s√©lection de langue
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_languages[user_id] = query.data
    if query.data == 'fr':
        await query.edit_message_text("üá´üá∑ Langue s√©lectionn√©e : Fran√ßais ! Pose-moi une question.")
    else:
        await query.edit_message_text("üá¨üáß Language selected: English! Ask me a question.")

# Commande /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'fr')
    if language == 'fr':
        await update.message.reply_text(
            "‚ÑπÔ∏è Voici ce que je peux faire :\n"
            "- R√©pondre aux questions sur l‚Äôinformatique et le d√©veloppement\n"
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è Here‚Äôs what I can do:\n"
            "- Answer questions about IT and development\n"
        )

# Commande /clear
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_histories:
        user_histories[user_id] = []
    language = user_languages.get(user_id, 'fr')
    if language == 'fr':
        await update.message.reply_text("üßπ Historique effac√©. La conversation recommence √† z√©ro.")
    else:
        await update.message.reply_text("üßπ History cleared. The conversation starts over.")

# Fonction pour g√©rer les messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_message = update.message.text
    logger.info(f"Message re√ßu de {user_id}: {user_message}")

    if not user_message:
        await update.message.reply_text("‚ö†Ô∏è Message vide.")
        return

    if user_id not in user_histories:
        user_histories[user_id] = []

    language = user_languages.get(user_id, 'fr')
    system_instruction = {
        "role": "system",
        "content": (
            "Tu es un expert en informatique et en d√©veloppement : web, applications, logiciels, technologies et programmation. "
            "Ton objectif principal est de r√©pondre aux questions li√©es √† l‚Äôinformatique et au d√©veloppement. "
            "Si l‚Äôutilisateur pose une question sur un autre sujet, r√©pond poliment et bri√®vement. "
            "R√©pond toujours de mani√®re courte et concise (1-3 phrases). "
            "Lis le message de l‚Äôutilisateur et r√©pond dans la m√™me langue que lui. "
            "Ajoute des emojis appropri√©s selon le ton et le contexte. "
            "Reste poli, amical et compr√©hensible."
        )
    }

    user_histories[user_id].append(system_instruction)
    user_histories[user_id].append({"role": "user", "content": user_message})

    try:
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=user_histories[user_id]
        )
        bot_reply = response.choices[0].message.content
        user_histories[user_id].append({"role": "assistant", "content": bot_reply})
        await update.message.reply_text(bot_reply)
        logger.info(f"R√©ponse envoy√©e : {bot_reply}")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è Une erreur est survenue.")
        logger.error(f"Erreur dans handle_message : {e}", exc_info=True)

# Endpoint webhook
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        logger.info(f"Requ√™te webhook re√ßue : {data}")
        update = Update.de_json(data, application.bot)
        logger.info(f"Update trait√© : {update}")
        await application.process_update(update)
        logger.info("Mise √† jour trait√©e avec succ√®s")
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Erreur dans le webhook : {e}", exc_info=True)
        return {"status": "error"}

# Route sant√©
@app.get("/health")
async def health():
    return {"status": "running"}

# Initialisation et configuration du webhook au d√©marrage
@app.on_event("startup")
async def on_startup():
    await application.initialize()  # Initialisation explicite
    webhook_url = os.environ.get("WEBHOOK_URL", "https://bot-1xw3.onrender.com/webhook")
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook configur√© sur {webhook_url}")

# Ajout des handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("clear", clear))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(CallbackQueryHandler(set_language))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))